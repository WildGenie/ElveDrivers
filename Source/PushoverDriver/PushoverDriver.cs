/*
 *  Copyright 2014 Jonathan Bradshaw. All rights reserved.
 *  Redistribution and use in source and binary forms, with or without modification, is permitted.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CodecoreTechnologies.Elve.DriverFramework;
using CodecoreTechnologies.Elve.DriverFramework.Scripting;
using RestSharp;

namespace Elve.Driver.Pushover
{
    /// <summary>
    ///     Pushover Notification Driver
    /// </summary>
    [Driver(
        "Pushover",
        "Pushover Notification Driver.",
        "Jonathan Bradshaw",
        "Communications",
        "Notifications",
        "pushover",
        DriverCommunicationPort.Network,
        DriverMultipleInstances.MultiplePerDriverService,
        1,
        0,
        DriverReleaseStages.Test,
        "Pushover",
        "http://pushover.net/",
        null)]
    public class PushoverDriver : CodecoreTechnologies.Elve.DriverFramework.Driver
    {
        #region Private Fields

        private const string PushoverUrl = "https://api.pushover.net/1/messages.json";

        private string _apiToken = "a1AWdJnKniM8Nz6W4xsEartvMQG9jv";
        private string _userKey;
        private int _totalSent;
        private int _totalErrors;
        private string _lastError;
        private int _remaining = 99999;

        #endregion Private Fields

        #region Public Properties

        /// <summary>
        /// Sets the API token.
        /// </summary>
        [DriverSetting("Pushover Api Key", "The application token generated by Pushover.", null, false)]
        public string ApiToken
        {
            set { _apiToken = value; }
        }

        /// <summary>
        /// Sets the user key.
        /// </summary>
        [DriverSetting("Default User Key", 
            "The default user key to use (normally your key from the Pushover dashboard) used when the recipient isn't specified for a notification.", null, true)]
        public string DefaultUserKey
        {
            set { _userKey = value; }
        }

        [ScriptObjectProperty("Total Sent", "Gets the total messages sent since the driver last started.", "the {NAME} total messages sent", null)]
        [SupportsDriverPropertyBinding]
        public ScriptNumber TotalSent
        {
            get { return new ScriptNumber(_totalSent);}
        }

        [ScriptObjectProperty("Total Errors", "Gets the total errors since the driver last started.", "the {NAME} total errors", null)]
        [SupportsDriverPropertyBinding("Total Errors Changed", "Occurs when the number of errors changes.")]
        public ScriptNumber TotalErrors
        {
            get { return new ScriptNumber(_totalErrors); }
        }

        [ScriptObjectProperty("Last Error Message", "Gets the last error message.", "the {NAME} last error", null)]
        [SupportsDriverPropertyBinding]
        public ScriptString LastError
        {
            get {  return new ScriptString(_lastError ?? string.Empty);}
        }

        [ScriptObjectProperty("Total Remaining", "Gets the total message limit left for the month (only available after sending a message).", "the {NAME} remaining message limit", null)]
        [SupportsDriverPropertyBinding("Total Remaining Changed", "Occurs when the number of messages left changes.")]
        public ScriptNumber Remaining
        {
            get {  return new ScriptNumber(_remaining);}
        }

        #endregion Public Properties

        #region Public Methods

        [ScriptObjectMethod("Send Notification", "Sends a push notification.",
            "Send a {PARAM|0|0} priority notification with the title {PARAM|1|Title} and a message of {PARAM|2|Message} with the {PARAM|3|pushover} sound.")]
        [ScriptObjectMethodParameter("Priority", "The message priority.", new[] { -2.0, -1.0, 0.0, 1.0, 2.0 }, new[] { "Lowest", "Low", "Normal", "High", "Emergency" })]
        [ScriptObjectMethodParameter("Title", "The title for the notification.")]
        [ScriptObjectMethodParameter("Message", "The push message content (maximum 512 characters).")]
        [ScriptObjectMethodParameter("Sound", "The notification sound.", new[] {"pushover", "bike", "bugle", "cashregister", "classical", "cosmic", "falling", "gamelan", "incoming",
            "intermission", "magic", "mechanical", "pianobar", "siren", "spacealarm", "tugboat", "alien", "climb",
            "persistent", "echo", "updown", "none"})]
        public ScriptString SendNotification(ScriptNumber priority, ScriptString title, ScriptString message, ScriptString sound)
        {
            var response = PushMessage(
                _userKey,
                title.ToPrimitiveString(),
                priority.ToPrimitiveInt32(),
                message.ToPrimitiveString(),
                sound.ToPrimitiveString()
            );
            ProcessResponse(response);

            return new ScriptString(response.ErrorMessage ?? response.Content);
        }

        [ScriptObjectMethod("Send Notification to User", "Sends a push notification.",
                    "Send a {PARAM|0|0} priority notification to {PARAM|1|Key} with the title {PARAM|2|Title} and a message of {PARAM|3|Message} with the {PARAM|4|pushover} sound.")]
        [ScriptObjectMethodParameter("Priority", "The message priority.", new[] { -2.0, -1.0, 0.0, 1.0, 2.0 }, new[] { "Lowest", "Low", "Normal", "High", "Emergency" })]
        [ScriptObjectMethodParameter("User", "The user/group key (not e-mail address) of your user (or you), viewable when logged into the Pushover dashboard.")]
        [ScriptObjectMethodParameter("Title", "The title for the notification.")]
        [ScriptObjectMethodParameter("Message", "The push message content (maximum 512 characters).")]
        [ScriptObjectMethodParameter("Sound", "The notification sound.", new[] {"pushover", "bike", "bugle", "cashregister", "classical", "cosmic", "falling", "gamelan", "incoming",
            "intermission", "magic", "mechanical", "pianobar", "siren", "spacealarm", "tugboat", "alien", "climb",
            "persistent", "echo", "updown", "none"})]
        public ScriptString SendNotificationToUser(ScriptNumber priority, ScriptString user, ScriptString title, ScriptString message, ScriptString sound)
        {
            var response = PushMessage(
                user.ToPrimitiveString(),
                title.ToPrimitiveString(),
                priority.ToPrimitiveInt32(),
                message.ToPrimitiveString(),
                sound.ToPrimitiveString()
            );
            ProcessResponse(response);

            return new ScriptString(response.ErrorMessage ?? response.Content);
        }

        /// <summary>
        /// Starts the driver.
        /// </summary>
        /// <param name="configFileData">The configuration file data.</param>
        /// <returns></returns>
        public override bool StartDriver(Dictionary<string, byte[]> configFileData)
        {
            return true;
        }

        /// <summary>
        /// Stops the driver.
        /// </summary>
        public override void StopDriver()
        {
        }

        #endregion Public Methods

        #region Private Methods

        /// <summary>
        /// Processes the response.
        /// </summary>
        /// <param name="response">The response.</param>
        private void ProcessResponse(IRestResponse response)
        {
            if (response == null || response.Headers == null) return;

            var headers = response.Headers.ToDictionary(h => h.Name, h => h.Value);
            if (headers.ContainsKey("X-Limit-App-Remaining"))
            {
                _remaining = Convert.ToInt32(headers["X-Limit-App-Remaining"]);
                DevicePropertyChangeNotification("Remaining", _remaining);
            }
        }

        /// <summary>
        /// Pushes the message.
        /// </summary>
        /// <param name="user">The user.</param>
        /// <param name="title">The title.</param>
        /// <param name="priority">The priority.</param>
        /// <param name="message">The message.</param>
        /// <param name="sound">The sound.</param>
        /// <param name="device">The device.</param>
        /// <returns>API Response</returns>
        private IRestResponse PushMessage(
            string user, 
            string title, 
            int priority, 
            string message, 
            string sound, 
            string device = null)
        {
            if (title != null && title.Length > 100) title = title.Substring(0, 100);
            var maxleft = 512 - (title == null ? 0 : title.Length);
            if (message.Length > maxleft) message = message.Substring(0, maxleft);

            var client = new RestClient(PushoverUrl);
            var request = new RestRequest
            {
                RequestFormat = DataFormat.Json,
                Method = Method.POST,
            };
            request.AddParameter("token", _apiToken);
            request.AddParameter("user", user ?? _userKey);
            request.AddParameter("message", message);
            if (title != null) request.AddParameter("title", title);
            if (priority != 0) request.AddParameter("priority", priority);
            if (device != null) request.AddParameter("device", device);
            if (sound != null) request.AddParameter("sound", sound);

            Logger.DebugFormat("Sending Pushover notification to {0} ({1}).", user, title);
            var response = client.Execute(request);

            DevicePropertyChangeNotification("TotalSent", ++_totalSent);

            if (!string.IsNullOrEmpty(response.ErrorMessage))
                LogError(response.ErrorMessage);

            return response;
        }

        private void LogError(string error)
        {
            _lastError = error;
            DevicePropertyChangeNotification("TotalErrors", ++_totalErrors);
            DevicePropertyChangeNotification("LastError", _lastError);
            Logger.ErrorFormat("Pushover error {0}", _lastError);            
        }

        #endregion Private Methods
    }
}